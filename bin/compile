#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path

# source in common functions
. $BIN_DIR/common.sh

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/util
. bin/java

export_env_dir $ENV_DIR

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# create default system.properties 
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

# install JDK 
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

PLAY_PATH=".play"
IVY_PATH=".ivy2"

# Change dir to handle relative paths
cd $BUILD_DIR

# Unpack cache
for DIR in $PLAY_PATH $IVY_PATH ; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    cp -r $CACHE_DIR/$DIR $DIR
  fi
done

PLAY_VERSION=$(get_play_version conf/dependencies.yml)
DEFAULT_PLAY_VERSION="1.2.7"
VERSION_DECLARED=true

if [ -z "$PLAY_VERSION" ] ; then
  PLAY_VERSION=$DEFAULT_PLAY_VERSION
  VERSION_DECLARED=false
  echo "-----> WARNING: Play! version not specified in dependencies.yml. Default version: $PLAY_VERSION being used...."
fi

# Install Play! or update the version
if [ ! -f $PLAY_PATH/play ]; then
  install_play $PLAY_VERSION
else
  INSTALLED_PLAY_VERSION=`cat $PLAY_PATH/framework/src/play/version`
  if [ "$INSTALLED_PLAY_VERSION" != "$PLAY_VERSION" ] && $VERSION_DECLARED ; then
    echo "-----> Updating Play! version. Previous version was $INSTALLED_PLAY_VERSION. Updating to $PLAY_VERSION..."
    rm -rf $PLAY_PATH
    install_play $PLAY_VERSION
  fi
fi

PLAY_SETTINGS_URL="http://s3.amazonaws.com/heroku-jvm-langpack-play/ivysettings.xml"

echo -n "-----> Installing ivysettings.xml....."
if [ -f .ivy2/ivysettings.xml ]; then
  rm .ivy2/ivysettings.xml 
fi
curl --silent --max-time 10 --location $PLAY_SETTINGS_URL --create-dirs --output .ivy2/ivysettings.xml
echo " done"

# Build app
echo "-----> Building Play! application..."
$PLAY_PATH/play version | sed -u 's/^/       /'

# Precompile the Play! application at the root of $BUILD_DIR
APP_DIR=./
echo "       Building Play! application at directory $APP_DIR"

DEPENDENCIES_CMD="$PLAY_PATH/play dependencies $APP_DIR --forProd --forceCopy --silent -Duser.home=$BUILD_DIR 2>&1"
echo "       Resolving dependencies: $DEPENDENCIES_CMD"
eval "$DEPENDENCIES_CMD" | sed -u 's/^/       /'
check_compile_status

PRECOMPILE_CMD="$PLAY_PATH/play precompile $APP_DIR --silent 2>&1"
echo "       Precompiling: $PRECOMPILE_CMD" 
eval "$PRECOMPILE_CMD" | sed -u 's/^/       /'
check_compile_status

# Repack Play! framework into cache
mkdir -p $CACHE_DIR
for DIR in $PLAY_PATH $IVY_PATH ; do
  rm -rf $CACHE_DIR/$DIR
  cp -r $DIR $CACHE_DIR/$DIR
done

PROFILE_PATH="$BUILD_DIR/.profile.d/play.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH

# Remove build time dependencies from slug
# (Note: runtime modules are copied to slug with --forceCopy option)
rm -fr $PLAY_PATH/modules
rm -fr $IVY_PATH

# Warn if no Procfile is present
if [ ! -f Procfile ]; then
  echo "-----> No Procfile found. Will use the following default process: "
  echo "       play run --http.port=\$PORT \$PLAY_OPTS"
fi

# ---------- GULP SHITZ --------------

# Resolve node version using semver.io
node_version=$(curl --silent --get https://semver.io/node/stable)

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$PATH:$build_dir/vendor/node/bin

# Run subsequent node/npm commands from the build path
cd $build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $cache_dir/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi
fi

# Scope config var availability only to `npm install`
(
  if [ -d "$env_dir" ]; then
    status "Exporting config vars to environment"
    export_env_dir $env_dir
  fi

  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $build_dir/.npmrc --production 2>&1 | indent
)

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if test -d $build_dir/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh

# Check and run gulp
(
  if [ -f $build_dir/client/gulpfile.js ]; then
    cd client
    # get the env vars
    if [ -d "$env_dir" ]; then
      status "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    # Install gulp locally
    npm install gulp
    status "Found gulpfile, running gulp prod task"
    $build_dir/node_modules/.bin/gulp prod 
  else
    status "No gulpfile found"
  fi
)

